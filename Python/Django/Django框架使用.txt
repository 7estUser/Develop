urls.py 		控制器：根据请求URL将HTTP请求重定向到适当的视图(views)。
views.py 		视图：  收HTTP请求并返回HTTP响应，并将响应的格式委托给模板(Templates)。	
models.py 		模型：  Python对象，定义应用程序数据的结构，并提供管理（添加、修改、删除）和数据库中记录的机制。
					   同时来定义任何类型文件的结构。
Templates		模板：  文本文件，用于定义文件的结构或布局（如HTML页面），其中占位符用于表示实际内容。
					   视图可以使用HTML模板动态创建HTML页面，并用模型(models)中的数据填充它。
settings.py     配置

return render(request,'html',参数)
	render()函数创建发送回浏览器的HttpResponse。
	这个函数是一个快捷方式；它通过组合指定的HTML模板和一些要插入到模板中的数据（在名为“context”的变量中提供）来创建HTML文件

创建django项目：
	django-admin startproject 项目名称(例如：my_test)
		1、会生成一个项目名称的文件夹和manage.py文件。
		2、manage.py : Django 项目管理的命令行脚本。
		3、项目名称/	：目录包含你的项目，它是一个纯 Python 包。它的名字就是当你引用它内部任何东西时需要用到的 Python 包名。 (比如 mysite.urls)。
		4、项目名称/__init__.py : 一个空文件，告诉 Python 这个目录应该被认为是一个 Python 包。
		5、项目名称/settings.py : Django 项目的配置文件。
		6、项目名称/urls.py 	  ： Django 项目的 URL 声明，就像你网站的“目录”。
		7、项目名称/wsgi.py 	  ： 作为你的项目的运行在 WSGI 兼容的Web服务器上的入口。

python manage.py + 参数
	Django项目命令执行：
python manage.py runserver 0.0.0.0:8000
	使用django启动项目：
python manage.py collectstatic --noinput
	所有STATICFILES_DIRS中所有文件夹中的文件，以及各app中static中的文件都复制过来放在一起：
python manage.py migrate
	创建表结构